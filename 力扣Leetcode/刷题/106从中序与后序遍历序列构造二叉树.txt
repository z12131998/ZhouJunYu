/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        return build(inorder,postorder,0,inorder.length-1,0,postorder.length-1);
    }
    private TreeNode build(int[] A,int[] B,int k1,int k2,int k3,int k4){
        if(k1>k2||k3>k4){return null;}
        TreeNode root = new TreeNode(B[k4]);
        int tmp1=k1,tmp2; //tmp1为找到根的位置,tmp2记录前面多少个节点,用于下一轮循环
        while(B[k4]!=A[tmp1]){
            tmp1++;
        }
        tmp2=tmp1-k1;
        //左边把中序根左边放入,把后序按照tmp2的个数放入
        root.left=build(A,B,k1,k1+tmp2-1,k3,k3+tmp2-1);
        root.right=build(A,B,k1+tmp2+1,k2,k3+tmp2,k4-1);
        return root;
    }
}