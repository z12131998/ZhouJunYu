class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if ( triangle == null){
            return 0;
        }
        if ( triangle.size() == 0 ) {
            return 0;
        }
        if ( triangle.size() == 1){
            return triangle.get(0).get(0);
        }
        int m = triangle.size();
        int n = triangle.get(m-1).size();
        int[][] dp = new int[n][n];
        dp[0][0] = triangle.get(0).get(0);
        for (int i = 1; i < n; i++){
            dp[i][0] = dp[i-1][0] + triangle.get(i).get(0);
            dp[i][i] = dp[i-1][i-1] + triangle.get(i).get(i);
        }
        for( int i = 1; i < triangle.size(); i++){
            for ( int j = 1; j < i; j++){
                
                dp[i][j]  = Math.min(dp[i-1][j],dp[i-1][j-1])+triangle.get(i).get(j);
            }
        }

        int max = Integer.MAX_VALUE;
        for(int i =0; i < dp[dp.length-1].length; i++){
            max = Math.min(dp[dp.length-1][i],max);
        }
        return max;
    }
}