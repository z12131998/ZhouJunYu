class Solution {
    public String[] findWords(String[] words) {
        List<String> tmpRes = new ArrayList<>();
        Set<Character> set1 = new HashSet<>();
        set1.add('q');
        set1.add('w');
        set1.add('e');
        set1.add('r');
        set1.add('t');
        set1.add('y');
        set1.add('u');
        set1.add('i');
        set1.add('o');
        set1.add('p');
        Set<Character> set2 = new HashSet<>();
        set2.add('a');
        set2.add('s');
        set2.add('d');
        set2.add('f');
        set2.add('g');
        set2.add('h');
        set2.add('j');
        set2.add('k');
        set2.add('l');
        Set<Character> set3 = new HashSet<>();
        set3.add('z');
        set3.add('x');
        set3.add('c');
        set3.add('v');
        set3.add('b');
        set3.add('n');
        set3.add('m');
        for(String item: words){
            if(item.length()==1){
                tmpRes.add(item);
            }
           String item1=item.toLowerCase();
            char tmp= item1.charAt(0);
            Set<Character> tmpSet;
            if(set1.contains(tmp)){
                tmpSet=set1;
            }else if(set2.contains(tmp)){
                tmpSet=set2;
            }else{
                tmpSet=set3;
            }
            for(int i=1,j=1;i<item1.length();i++){
                if(tmpSet.contains(item1.charAt(i))){
                    j++;
                    if(j==item.length()){
                        tmpRes.add(item);
                    }
                }
            }
        }
        String[] res =tmpRes.toArray(new String[tmpRes.size()]);
        return res;
    }
}