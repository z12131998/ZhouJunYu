/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;//后序遍历  序列化思想
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        Map<String,Integer> map = new HashMap<String,Integer>();
        List<TreeNode> res = new ArrayList<TreeNode>();
        find(root,res,map);
        return res;
    }
    private StringBuilder find(TreeNode root,List<TreeNode> res,Map<String,Integer> map){
        if(root==null){
            return new StringBuilder(",$");
        }
        StringBuilder left = find(root.left,res,map);
        StringBuilder right = find(root.right,res,map);
        StringBuilder treeKey = new StringBuilder(root.val+",").append(left).append(right);
          map.put(treeKey.toString(), map.getOrDefault(treeKey.toString(), 0) + 1);
        if(map.get(treeKey.toString()) == 2){
            res.add(root);
        }
        return treeKey;
    }   
}