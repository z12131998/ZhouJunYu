class Solution {
    public int[] findRightInterval(int[][] intervals) {
        if ( intervals.length == 1){
            return new int[]{-1};
        }//傻逼[1,1][3,4] 右区间可以是本身   凸(艹皿艹 )
        int[] res = new int[intervals.length];
        Map<int[],Integer> map = new HashMap<>();
        for (int i =0; i < intervals.length; i++){
            map.put(intervals[i],i);
        }
        Arrays.fill(res,Integer.MAX_VALUE);
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        for (int i = 0; i < intervals.length; i++){
            int left =0, right = intervals.length -1,targer = intervals[i][1];
            while ( left <= right){
                int mid = left + (right - left ) / 2;
                if ( intervals[mid][0] >= targer){
                    right = mid -1;
                    res[map.get(intervals[i])] = map.get(intervals[mid]);
                }else{
                    left = mid +1;
                }
                if ( res[map.get(intervals[i])] == Integer.MAX_VALUE){
                    res[ map.get(intervals[i])] = -1;
                }
            }
        }
        return res;
    }
}