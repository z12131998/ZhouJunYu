/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> largestValues(TreeNode root) {
        if ( root == null){
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while ( !queue.isEmpty()){
            int max = Integer.MIN_VALUE;
            int n =queue.size();
            for ( int i = 0; i < n; i++){
                TreeNode tmp = queue.poll();
                max = Math.max(max,tmp.val);
               if( tmp.left != null){
                    queue.offer(tmp.left);
               }
               if( tmp.right !=null){
                   queue.offer(tmp.right);
               }
            }
            res.add(max);
        }
        return res;
    }
}